version: '3.4'

volumes:
  frontend-files:
    driver_opts:
      type: none
      device: ${PWD}/frontend/app
      o: bind
  backend-files:
    driver_opts:
      type: none
      device: ${PWD}/backend
      o: bind

networks:
  trans-network:

services:

  frontend:
    build: ./frontend/config
    container_name: ft_frontend
    ports:
      - "443:443"
    volumes:
      - frontend-files:/var/www
    networks:
      - trans-network

  backend:
    build: ./backend
    container_name: ft_backend
    ports:
      - "8000:8000"
    volumes:
      - backend-files:/app
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
    networks:
      - trans-network

  db:
    image: postgres:latest
    container_name: ft_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    networks:
      - trans-network

  mock-server:
    image: mockoon/cli:latest
    command: ["--data", "data", "--port", "3000"]
    ports:
      - "3005:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/your-healthcheck-route || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 10s
    volumes:
      - ./mock-data/transcendence.json:/data
    networks:
      - trans-network


# docker stop $(docker ps -a -q)  # Para todos os contêineres
# docker rm $(docker ps -a -q)  # Remove todos os contêineres
# docker rmi $(docker images -q)  # Remove todas as imagens
# docker network prune -f  # Remove todas as redes não utilizadas
# docker volume prune -f  # Remove todos os volumes não utilizados
# docker system prune -a --volumes
# docker volume rm ft_transcendence_backend-files ft_transcendence_frontend-files
