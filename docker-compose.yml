version: '3.4'

networks:
  trans:

services:

  frontend:
    build: ./frontend/config
    container_name: ft_frontend
    ports:
      - "443:443"
      - "4009:80"
    volumes:
      - ./frontend/app:/var/www
    networks:
      - trans

  backend:
    build: ./backend
    container_name: ft_backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: db
      PYTHONUNBUFFERED: 1
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
    depends_on:
      - db
      - redis
    networks:
      - trans

  db:
    image: postgres:latest
    container_name: ft_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
    - "5432:5432"
    restart: always
    networks:
      - trans

  redis:
    image: redis:latest
    container_name: ft_redis
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "6379:6379"
    networks:
      - trans


# docker stop $(docker ps -a -q)
# docker rm $(docker ps -a -q)
# docker rmi $(docker images -q)
# docker network prune -f
# docker volume prune -f
# docker system prune -a --volumes
# docker volume rm ft_transcendence_backend-files ft_transcendence_frontend-files
